/**
 * Heuristically determines if the AI's raw text output is likely an error message
 * instead of valid code/content.
 * @param content The raw string content generated by the AI.
 * @returns True if the content is likely an error message, false otherwise.
 */
export function isAIOutputLikelyErrorMessage(content: string): boolean {
	const lowerContent = content.toLowerCase().trim();

	// Common phrases indicating an AI error or inability to perform a task
	const errorPhrases = [
		"i am sorry",
		"i'm sorry",
		"i cannot fulfill this request",
		"i encountered an error",
		"i ran into an issue",
		"an error occurred",
		"i am unable to provide",
		"please try again",
		"i couldn't generate",
		"i'm having trouble",
		"error:",
		"failure:",
		"exception:",
		"i can't",
		"i am not able to",
		"as an ai model", // Often precedes an explanation for not being able to do something
		"i lack the ability to",
		"insufficient information",
		"invalid request",
		"not enough context",
	];

	// Common system/API error phrases that might be passed through
	const systemErrorPhrases = [
		"access denied",
		"file not found",
		"permission denied",
		"timeout",
		"rate limit",
		"quota exceeded",
		"server error",
		"api error",
	];

	// Combine all phrases
	const allErrorPhrases = [...errorPhrases, ...systemErrorPhrases];

	// Check for explicit error phrases first (highest priority)
	if (allErrorPhrases.some((phrase) => lowerContent.includes(phrase))) {
		return true;
	}

	// Helper function to check if content appears to be code
	function isLikelyCode(content: string): boolean {
		const trimmed = content.trim();

		// Check for common code indicators
		const codeIndicators = [
			// Programming language keywords
			/\b(function|class|const|let|var|if|else|for|while|return|import|export|interface|type|enum)\b/i,
			// Common code patterns
			/[{}\[\]();=<>!&|]/,
			// Variable assignments
			/\w+\s*[:=]\s*\w+/,
			// Function calls
			/\w+\([^)]*\)/,
			// Import/export statements
			/^(import|export)\s+/m,
			// TypeScript/JavaScript patterns
			/:\s*(string|number|boolean|any|void|object|array)/i,
			// HTML/JSX patterns
			/<\/?[a-z][\w-]*/i,
			// CSS patterns
			/\{[^}]*\}/,
			// Comments
			/\/\/.*$/m,
			/\/\*[\s\S]*?\*\//,
		];

		return codeIndicators.some((pattern) => pattern.test(trimmed));
	}

	// Helper function to check if content appears to be natural language
	function isLikelyNaturalLanguage(content: string): boolean {
		const trimmed = content.trim();

		// Natural language indicators
		const naturalLanguageIndicators = [
			// Sentences with proper punctuation
			/^[A-Z][^.!?]*[.!?]$/m,
			// Common natural language patterns
			/\b(the|a|an|and|or|but|in|on|at|to|for|of|with|by)\b/i,
			// Apologetic or explanatory language
			/\b(sorry|apologize|unfortunately|regrettably|however|therefore|thus|hence)\b/i,
			// Questions
			/\?$/m,
		];

		return naturalLanguageIndicators.some((pattern) => pattern.test(trimmed));
	}

	// Check if content is likely code vs natural language
	const appearsToBeCode = isLikelyCode(content);
	const appearsToBeNaturalLanguage = isLikelyNaturalLanguage(content);

	// If content appears to be code, be more conservative with error detection
	if (appearsToBeCode && !appearsToBeNaturalLanguage) {
		// For code, only check for explicit error phrases that are unlikely to appear in valid code
		const codeSpecificErrorPhrases = [
			"i am sorry",
			"i'm sorry",
			"i cannot fulfill this request",
			"i encountered an error",
			"i ran into an issue",
			"an error occurred",
			"i am unable to provide",
			"please try again",
			"i couldn't generate",
			"i'm having trouble",
			"i can't",
			"i am not able to",
			"as an ai model",
			"i lack the ability to",
			"insufficient information",
			"invalid request",
			"not enough context",
		];

		return codeSpecificErrorPhrases.some((phrase) =>
			lowerContent.includes(phrase)
		);
	}

	// For content that appears to be natural language or mixed content,
	// use the original heuristic for short content with error keywords
	if (
		content.length < 200 &&
		(lowerContent.includes("error") ||
			lowerContent.includes("fail") ||
			lowerContent.includes("issue"))
	) {
		// Additional check: if it contains code-like patterns, it might be valid
		if (isLikelyCode(content)) {
			return false;
		}
		return true;
	}

	// Safety net: check for markdown code blocks that explicitly contain error-like text.
	// This is for cases where markdown stripping might fail or AI incorrectly wraps an error in a code block.
	// Make the pattern more specific to avoid false positives
	const markdownErrorPattern =
		/```(?:[a-zA-Z0-9]+)?\s*(error|fail|exception|apology|i am sorry|i'm sorry)[\s\S]*?```/i;
	if (markdownErrorPattern.test(content)) {
		// Additional check: if the content inside the code block looks like valid code, don't flag it
		const codeBlockMatch = content.match(/```[\s\S]*?```/);
		if (codeBlockMatch && isLikelyCode(codeBlockMatch[0])) {
			return false;
		}
		return true;
	}

	return false;
}
