/**
 * Heuristically determines if the AI's raw text output is likely an error message
 * instead of valid code/content.
 * @param content The raw string content generated by the AI.
 * @returns True if the content is likely an error message, false otherwise.
 */
export function isAIOutputLikelyErrorMessage(content: string): boolean {
	const lowerContent = content.toLowerCase().trim();

	// Common phrases indicating an AI error or inability to perform a task
	const errorPhrases = [
		"i am sorry",
		"i'm sorry",
		"i cannot fulfill this request",
		"i encountered an error",
		"i ran into an issue",
		"an error occurred",
		"i am unable to provide",
		"please try again",
		"i couldn't generate",
		"i'm having trouble",
		"error:",
		"failure:",
		"exception:",
		"i can't",
		"i am not able to",
		"as an ai model", // Often precedes an explanation for not being able to do something
		"i lack the ability to",
		"insufficient information",
		"invalid request",
		"not enough context",
	];

	// Common system/API error phrases that might be passed through
	const systemErrorPhrases = [
		"access denied",
		"file not found",
		"permission denied",
		"timeout",
		"rate limit",
		"quota exceeded",
		"server error",
		"api error",
	];

	// Combine all phrases
	const allErrorPhrases = [...errorPhrases, ...systemErrorPhrases];

	if (allErrorPhrases.some((phrase) => lowerContent.includes(phrase))) {
		return true;
	}

	// Heuristic for very short content that looks like an error
	// E.g., if it's less than 200 characters and contains keywords like "error", "fail", "issue"
	if (
		content.length < 200 &&
		(lowerContent.includes("error") ||
			lowerContent.includes("fail") ||
			lowerContent.includes("issue"))
	) {
		return true;
	}

	// Safety net: check for markdown code blocks that explicitly contain error-like text.
	// This is for cases where markdown stripping might fail or AI incorrectly wraps an error in a code block.
	const markdownErrorPattern =
		/```(?:[a-zA-Z0-9]+)?\s*(error|fail|exception|apology|i am sorry)[\s\S]*?```/i;
	if (markdownErrorPattern.test(content)) {
		return true;
	}

	return false;
}
