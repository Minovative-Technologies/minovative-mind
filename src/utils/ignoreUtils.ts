import * as vscode from "vscode";
import ignore from "ignore";

// Default patterns to ignore, mimicking common project build/dependency folders and git
export const DEFAULT_IGNORE_PATTERNS: string[] = [
	// --- Common Build/Dependency Folders ---
	"node_modules",
	".git", // Git directory
	"dist",
	"out",
	"target", // Common in Java/Rust
	"packages/", // Common directory for NuGet packages in .NET projects or other language package caches

	// --- Hidden Files/Folders (Dotfiles/Dotfolders) ---
	".vscode", // VS Code workspace settings
	".idea", // JetBrains IDE settings
	".settings", // Eclipse settings
	".github", // GitHub specific files (workflows, etc.)
	".gitlab", // GitLab specific files
	".env*", // Environment variables (e.g., .env, .env.local)
	".DS_Store", // macOS folder metadata
	".classpath", // Java classpath file
	".project", // Eclipse project file
	".cache", // Common cache directory
	".npm", // npm cache/config
	".yarn", // Yarn cache/config

	// --- OS/System Specific Files ---
	"Thumbs.db", // Windows thumbnail cache file
	"ehthumbs.db", // Windows thumbnail cache for video files
	"Desktop.ini", // Windows folder customization file
	"._*", // macOS hidden resource fork files (e.g., ._.DS_Store)
	".localized", // macOS localized folder identifier for localized folders

	// --- Lock Files ---
	"package-lock.json",
	"yarn.lock",
	"pnpm-lock.yaml",
	"composer.lock", // PHP
	"Gemfile.lock", // Ruby
	"Pipfile.lock", // Python
	"poetry.lock", // Python
	"Cargo.lock", // Rust dependency lock file

	// --- Log Files ---
	"*.log",

	// --- Temporary/System Files ---
	"*~", // Backup files (e.g., from text editors)
	"*.tmp", // Temporary files
	"*.bak", // Backup files
	"*.orig", // Original files created during merges/patches
	"*.rej", // Rejection files from patch operations
	"*.~", // General backup files (complementing existing *~)

	// --- Compiled/Runtime Artifacts & Cache ---
	"*.pyc",
	"__pycache__",
	"*.class", // Java compiled bytecode
	"*.o", // Object files (C/C++)
	"*.a", // Static libraries (Unix)
	"*.so", // Shared object libraries (Linux)
	"*.dll", // Dynamic link libraries (Windows)
	"*.exe", // Executable files (Windows)
	"*.pdb", // Program Debug Database (Windows/VS)
	"*.pyo", // Python optimized bytecode
	"*.pyd", // Python dynamic module (Windows)
	"*.spec", // PyInstaller spec files
	".eggs/", // Python eggs distribution directory
	"*.egg-info/", // Python egg metadata directories
	"bin/", // General directory for compiled binaries and executables
	"obj/", // General directory for intermediate object files, common in compiled languages

	// --- Virtual Environments ---
	".venv/", // Common Python virtual environment directory
	"venv/", // Alternative Python virtual environment directory

	// --- Tool/Editor/IDE Specific Files/Folders ---
	"typings/", // TypeScript declaration files directory, often generated
	"elm-stuff/", // Elm build artifact and package cache
	"jspm_packages/", // JSPM package directory
	"npm-debug.log*", // npm debug log files
	"yarn-debug.log*", // Yarn debug log files
	".history/", // VS Code local history directory
	".ionide/", // F# VS Code extension directory
	".vagrant/", // Vagrant environment directory
	".terraform/", // Terraform cache and state directory
	"tfplan", // Terraform plan file
	"*.tfstate*", // Terraform state files and backups
	"*.terraform.tfstate*", // Terraform state files generated by some versions
	"Session.vim", // Vim session file
	"*.iml", // IntelliJ IDEA module files
	"*.ipr", // IntelliJ IDEA project files
	"*.iws", // IntelliJ IDEA workspace files
	"*.swp", // Vim swap files
	"*.swo", // Vim swap files, older
	"*.swn", // Vim swap files, newer
	"*.sublime-project", // Sublime Text project files
	"*.sublime-workspace", // Sublime Text workspace files
	"*.elc", // Emacs compiled Lisp files
	".vscode-insiders/", // VS Code Insiders specific settings/cache directory
	"__debug_bin/", // Common debug output directory from various extensions

	// --- .NET Specific Files/Artifacts ---
	"*.user", // Visual Studio user-specific project files
	"*.filters", // Visual Studio project filter files
	"*.suo", // Visual Studio solution user options file
	"*.build.log", // Visual Studio build log files
	"*.vshost.*", // Visual Studio Hosting Process files

	// --- General Project Output/Cache/Logs ---
	"tmp/", // General temporary directory
	"temp/", // Alternative general temporary directory
	"logs/", // Directory for log files
	"coverage/", // Code coverage reports directory
	"report/", // General report output directory
	"reports/", // General reports directory
	"vendor/", // PHP Composer or other dependency vendor directories
	"build/", // Generic build output directory

	// --- Test/Report Output ---
	"lcov-report/", // JavaScript code coverage reports directory
	"TestResults/", // Common directory for test results, especially in .NET

	// --- Database Files ---
	"*.sqlite", // SQLite database files
	"*.sqlite3", // SQLite3 database files
	"*.db", // General database files (e.g., local development dbs)

	// --- Media & Archive Files (already present, kept for completeness) ---
	"*.vsix",
	// Images
	"*.png",
	"*.jpg",
	"*.jpeg",
	"*.gif",
	"*.bmp",
	"*.tiff",
	"*.ico",
	"*.webp",
	// Scalable Vector Graphics
	"*.svg",
	// Video
	"*.mp4",
	"*.webm",
	"*.avi",
	"*.mov",
	"*.wmv",
	"*.flv",
	"*.mkv",
	// Audio
	"*.mp3",
	"*.wav",
	"*.ogg",
	"*.aac",
	// Fonts
	"*.woff",
	"*.woff2",
	"*.ttf",
	"*.otf",
	"*.eot",
	// Archives
	"*.zip",
	"*.rar",
	"*.7z",
	"*.tar",
	"*.gz",
	// Documents (often not needed for code context)
	"*.pdf",
	"*.doc",
	"*.docx",
	"*.ppt",
	"*.pptx",
	"*.xls",
	"*.xlsx",

	// Java/Kotlin (Maven, Gradle, IntelliJ)
	"target/", // Maven build output directory
	"build/", // Gradle build output directory
	".gradle/", // Gradle cache and daemon files
	"out/", // IntelliJ IDEA default compilation output
	"*.jar", // Java archive files
	"*.war", // Java web application archive files
	"*.ear", // Java enterprise archive files
	"hs_err_pid*.log", // JVM crash logs
	"dependency-reduced-pom.xml", // Maven Shade Plugin artifact
	"*.iws", // Older IntelliJ IDEA workspace file
	"*.ipr", // Older IntelliJ IDEA project file

	// Go Specific Files
	"bin/", // Compiled executable binaries
	"pkg/", // Go module cache
	"*.exe", // Windows executables for Go applications
	"*.test", // Go test binaries
	"vendor/", // Go modules vendor directory

	// Ruby (Bundler, Rails)
	"vendor/bundle/", // Bundler’s installed gems
	".bundle/", // Bundler configuration cache
	"*.gem", // RubyGems package files
	"log/", // Rails log directory (if not already generally covered)
	"tmp/", // Rails temporary files (if not already generally covered)
	"public/assets/", // Rails precompiled assets
	"db/*.sqlite3", // Rails default development database file
	".byebug_history", // Byebug debugger history file

	// PHP (Composer, Laravel, Symfony)
	"storage/", // Laravel application storage, including logs, cache, sessions
	"bootstrap/cache/", // Laravel cached services
	"web/bundles/", // Symfony assetic bundle output
	"vendor/", // Composer dependencies directory
	"composer.lock", // Composer's lock file
	"composer.phar", // Composer executable
	".phpunit.result.cache", // PHPUnit test result cache

	// C/C++ (Make, CMake, Visual Studio)
	"*.obj", // Object files
	"*.lib", // Static libraries
	"*.exp", // Export files
	"*.ilk", // Incremental linker files
	"*.pch", // Precompiled header files
	"ipch/", // Precompiled header cache directory
	"Debug/", // Common build output directory for Debug configurations
	"Release/", // Common build output directory for Release configurations
	"x64/", // Platform-specific build output directory
	"Win32/", // Platform-specific build output directory
	"*.vcproj", // Visual Studio project files (user-specific, if applicable)
	"*.vcxproj", // Visual Studio C++ project files
	"*.sln", // Visual Studio solution files (user-specific, if applicable)
	"CMakeCache.txt", // CMake build artifact
	"CMakeFiles/", // CMake build artifacts directory
	"cmake_install.cmake", // CMake installation script
	"*.pdb", // Program Database files (Windows debug information)
	"*.gch", // GCC precompiled header files
	"*.d", // Dependency files generated by make/compilers
	"*.user", // Visual Studio user-specific project settings
	"*.suo", // Visual Studio solution user options
	"obj/", // Generic object files directory
	"*.aps", // Visual Studio resource editor file
	"*.ncb", // Older Visual Studio IntelliSense database
	"*.opensdf", // Visual Studio Intellisense database
	"*.sdf", // Visual Studio Intellisense database
	"*.VC.db", // Visual Studio C++ database

	// iOS/macOS (Xcode)
	"DerivedData/", // Xcode’s build output and cache
	"*.xcworkspace/xcuserdata/", // Xcode workspace user data
	"*.xcodeproj/xcuserdata/", // Xcode project user data
	"*.ipa", // iOS application bundles
	"*.app", // macOS application bundles
	"*.dSYM", // Debug symbols
	"Pods/", // CocoaPods dependencies directory
	"Carthage/Build/", // Carthage dependencies build directory
	"*.swiftpm/", // Swift Package Manager cache directory
	"build/", // General Xcode build output directory
	"*.xcuserdatad", // Xcode user data

	// JavaScript/TypeScript Frameworks & Tooling Specific
	".next/", // Next.js build output
	".nuxt/", // Nuxt.js build output
	".svelte-kit/", // SvelteKit build output
	".parcel-cache/", // Parcel bundler cache
	"*.tsbuildinfo", // TypeScript incremental build information file
	".eslintcache", // ESLint cache file
	"dist/", // Common JavaScript/TypeScript build output directory (if not generic enough)
	"out/", // Common JavaScript/TypeScript build output directory (if not generic enough)
	".yarn/", // Yarn 2+ cache/install directory
	"pnpm-lock.yaml", // pnpm specific lock file
	"pnpm-workspace.yaml", // pnpm specific workspace configuration
	"bun.lockb", // Bun's lock file
	".cache/", // Very common generic cache directory used by many JS tools
	".turbo/", // Turborepo cache directory
	".var/", // Nx cache directory
	"storybook-static/", // Storybook build output directory
	".vite/", // Vite cache directory
	".output/", // Common Nuxt 3 build output directory
	"_astro/", // Astro build output directory
	"coverage/", // Common test coverage output directory
	"lcov-report/", // LCOV coverage report directory
	"cypress/videos/", // Cypress E2E test video recordings
	"cypress/screenshots/", // Cypress E2E test screenshots
	".nyc_output/", // Istanbul/nyc coverage output directory

	// Python Specific Patterns
	".pytest_cache/", // Pytest cache directory
	"htmlcov/", // Coverage.py HTML report directory
	"__pycache__/", // Python bytecode cache directory
	"venv/", // Common virtual environment name
	"env/", // Common virtual environment name
	".mypy_cache/", // mypy type checker cache directory
	".ruff_cache/", // Ruff linter cache directory
	".ipynb_checkpoints/", // Jupyter notebook checkpoints
	"*.pyc", // Python compiled bytecode files (older/specific cases)
	"*.egg-info/", // Python package metadata directory
	"*.dist-info/", // Python package metadata directory
	".vscode/pylance/", // Pylance language server cache

	// More General Patterns
	"*.lock", // Generic for various package managers (e.g., Rust's Cargo.lock, Ruby's Gemfile.lock)
	"*.orig", // Merge conflict resolution original files
	"*.rej", // Merge conflict resolution rejected files
	".terraform/", // Terraform state and cache directory
	".history/", // VS Code's local history feature directory
	"test-results/", // Generic directory for test reports
	".DS_Store", // macOS directory service store
	"Thumbs.db", // Windows thumbnail cache
	"desktop.ini", // Windows custom folder settings
	".idea/", // IntelliJ IDEA project files (generic)
	"*.iml", // IntelliJ IDEA module files (generic)
	".project", // Eclipse project file
	".classpath", // Eclipse classpath file
	".settings/", // Eclipse project settings directory
	"ehthumbs.db", // Windows extended thumbnail cache
	"*.bak", // Generic backup files
	"*.swp", // Vim/NeoVim swap files
	"*.swo", // Vim/NeoVim swap files (older)
	"*.swn", // Vim/NeoVim swap files (older)
	"*~", // Emacs backup files
	"#*#", // Emacs backup files
	"core", // Unix core dump files
	"Icon\r", // macOS custom icon file (literal newline)
	"._*", // macOS resource fork files
	"tags", // Ctags output file
	"cscope.out", // Cscope output file
	"gtags.files", // Gtags database/index files
	"gtags.db", // Gtags database/index files
	"GTAGS", // Gtags database/index files
	"GRTAGS", // Gtags database/index files
	"GSYMS", // Gtags database/index files
	"GPATH", // Gtags database/index files
	"*.patch", // Patch files
	"*.diff", // Diff files
];

/**
 * Loads .gitignore rules from the workspace root and combines them with default ignore patterns.
 * Returns an 'ignore' instance configured with these rules.
 * @param workspaceRootUri The URI of the workspace root.
 * @param additionalIgnorePatterns Optional array of additional patterns to ignore.
 * @returns A configured 'ignore' instance.
 */
export async function loadGitIgnoreMatcher(
	workspaceRootUri: vscode.Uri,
	additionalIgnorePatterns?: string[]
) {
	const ig = ignore();
	ig.add(DEFAULT_IGNORE_PATTERNS);

	if (additionalIgnorePatterns && additionalIgnorePatterns.length > 0) {
		console.log(
			"Adding additional ignore patterns:",
			additionalIgnorePatterns.join(", ")
		);
		ig.add(additionalIgnorePatterns);
	}

	const gitIgnoreUri = vscode.Uri.joinPath(workspaceRootUri, ".gitignore");
	try {
		const gitIgnoreContentBytes = await vscode.workspace.fs.readFile(
			gitIgnoreUri
		);
		const gitIgnoreContent = Buffer.from(gitIgnoreContentBytes).toString(
			"utf-8"
		);
		console.log("Found .gitignore, adding rules to matcher.");
		ig.add(gitIgnoreContent);
	} catch (error) {
		if (
			error instanceof vscode.FileSystemError &&
			error.code === "FileNotFound"
		) {
			console.log(".gitignore not found in root, skipping loading its rules.");
		} else {
			console.error("Error reading .gitignore for ignoreUtils:", error);
		}
	}
	return ig;
}
